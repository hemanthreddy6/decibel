// Print statements
print "hello world!";

// Functions
f <- (a:long, b:int):int {
    if (a > b) {
        return a;
    } otherwise {
        return b;
    }
} ;
f1 <- (a:long, b:int):int {
    if (a < b) {
        return a;
    } otherwise {
        return b;
    }
} ;
// Function variables can be determined at runtime
f2 <- f;
if 100 > 20 {
    f2 = f1;
}
// If it's f1, 10 will be printed, otherwise 100
print f2(100, 10);

// Hz gets turned into semitones
print 1000hz;

// Loop statement and conditionals
a <- 0;
loop 10 {
    a += 1;
    if a > 8 {
        print - a;
    } or a > 6 {
        print a * 100;
    } or a > 4 {
        print a - 100;
    } otherwise {
        print a;
    }
}

scaler <- (t:float):float {
    return (8-t)/8;
};

// Loop until statement
loop until a==0 {
    print a;
    a -= 1;
}

// Audio functions
// loading 3 samples
snare <- load "snare2.wav";
kick <- load "kick_44100.wav";
hihat <- (load "hihat_44100.wav")*0.1;

hihat = hihat[0:0.125];

new_hihat <- hihat*0.1;

// Creating a hihat loop with increasing volume
a = 2;
loop until a>8{
    new_hihat = new_hihat + hihat*(0.1*a);
    a += 1;
}

new_hihat = new_hihat^8;

// play new_hihat;


snare = snare[0:0.5];

// play snare;

// kick = kick[0:0.75] + kick[0:0.5] + kick[0:0.75];
kick = kick[0:0.5]^32;

// snare_kick <- kick[-0.25:0.25] | snare[0:0.25];
// play snare_kick;

// play kick;

final_audio <- kick | snare[-0.5:0.5]^16 | new_hihat[-8:8]*2 | (hihat[-0.25:0.25]*5)^32;

wf <- (t:float):int {
    scale <- 7000;
    if (t < 0.5){
        return (-scale + 4*t*scale);
    } otherwise {
        return (scale - 4*(t-0.5)*scale);
    }
};

freq <- (t:float):float {
    if t < 0.05 {
        return 24 - 480*t;
    } or t < 0.3 {
        return -(t-0.05)*24/(0.3-0.05);
    } otherwise {
        return -24 -20*(t-0.3);
    }
    return -24;
};

duck <- (t:float):float {
    if t%0.5 <= 0.25{
        return ((t%0.5)/0.25)*((t%0.5)/0.25);
    } otherwise {
        return 1;
    }
};
duck2 <- (t:float):float {
    return 1-8*(t%0.125)*8*(t%0.125);
};


// gen <- audio(wf, freq, 0.5) * (t:float):float {return 1-t/0.5;};
gen1 <- audio(wf, -24, 0.75);
gen2 <- audio(wf, -22, 1);
gen3 <- audio(wf, -20, 1.75);
gen4 <- audio(wf, -22, 0.5);
gen5 <- audio(wf, -19, 0.75);
gen6 <- audio(wf, -17, 1);
gen7 <- audio(wf, -15, 1.75);
gen8 <- audio(wf, -12, 0.5);


gen <- ((gen1|gen5)+(gen2|gen6)+(gen3|gen7)+(gen4|gen8))*duck;
gen = gen*duck2;

// final_audio = final_audio*scaler;

play final_audio | gen^4 | (kick[-3.75:0.25])^4;

// loop over i 10 to 1 @-1{
//     print i;
// }

